<?php
/**
 * CategoryTreeNode
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\taxonomy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Taxonomy API
 *
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\taxonomy\Model;

use \ArrayAccess;
use \macropage\SDKs\ebay\rest\taxonomy\ObjectSerializer;

/**
 * CategoryTreeNode Class Doc Comment
 *
 * @category Class
 * @description This type contains information about all nodes of a category tree or subtree hierarchy, including and below the specified Category, down to the leaf nodes. It is a recursive structure.
 * @package  macropage\SDKs\ebay\rest\taxonomy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CategoryTreeNode implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CategoryTreeNode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category' => '\macropage\SDKs\ebay\rest\taxonomy\Model\Category',
        'categoryTreeNodeLevel' => 'int',
        'childCategoryTreeNodes' => '\macropage\SDKs\ebay\rest\taxonomy\Model\CategoryTreeNode[]',
        'leafCategoryTreeNode' => 'bool',
        'parentCategoryTreeNodeHref' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'category' => null,
        'categoryTreeNodeLevel' => 'int32',
        'childCategoryTreeNodes' => null,
        'leafCategoryTreeNode' => null,
        'parentCategoryTreeNodeHref' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'categoryTreeNodeLevel' => 'categoryTreeNodeLevel',
        'childCategoryTreeNodes' => 'childCategoryTreeNodes',
        'leafCategoryTreeNode' => 'leafCategoryTreeNode',
        'parentCategoryTreeNodeHref' => 'parentCategoryTreeNodeHref'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'categoryTreeNodeLevel' => 'setCategoryTreeNodeLevel',
        'childCategoryTreeNodes' => 'setChildCategoryTreeNodes',
        'leafCategoryTreeNode' => 'setLeafCategoryTreeNode',
        'parentCategoryTreeNodeHref' => 'setParentCategoryTreeNodeHref'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'categoryTreeNodeLevel' => 'getCategoryTreeNodeLevel',
        'childCategoryTreeNodes' => 'getChildCategoryTreeNodes',
        'leafCategoryTreeNode' => 'getLeafCategoryTreeNode',
        'parentCategoryTreeNodeHref' => 'getParentCategoryTreeNodeHref'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['category'] = $data['category'] ?? null;
        $this->container['categoryTreeNodeLevel'] = $data['categoryTreeNodeLevel'] ?? null;
        $this->container['childCategoryTreeNodes'] = $data['childCategoryTreeNodes'] ?? null;
        $this->container['leafCategoryTreeNode'] = $data['leafCategoryTreeNode'] ?? null;
        $this->container['parentCategoryTreeNodeHref'] = $data['parentCategoryTreeNodeHref'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return \macropage\SDKs\ebay\rest\taxonomy\Model\Category|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \macropage\SDKs\ebay\rest\taxonomy\Model\Category|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets categoryTreeNodeLevel
     *
     * @return int|null
     */
    public function getCategoryTreeNodeLevel()
    {
        return $this->container['categoryTreeNodeLevel'];
    }

    /**
     * Sets categoryTreeNodeLevel
     *
     * @param int|null $categoryTreeNodeLevel The absolute level of the current category tree node in the hierarchy of its category tree. Note: The root node of any full category tree is always at level 0.
     *
     * @return self
     */
    public function setCategoryTreeNodeLevel($categoryTreeNodeLevel)
    {
        $this->container['categoryTreeNodeLevel'] = $categoryTreeNodeLevel;

        return $this;
    }

    /**
     * Gets childCategoryTreeNodes
     *
     * @return \macropage\SDKs\ebay\rest\taxonomy\Model\CategoryTreeNode[]|null
     */
    public function getChildCategoryTreeNodes()
    {
        return $this->container['childCategoryTreeNodes'];
    }

    /**
     * Sets childCategoryTreeNodes
     *
     * @param \macropage\SDKs\ebay\rest\taxonomy\Model\CategoryTreeNode[]|null $childCategoryTreeNodes An array of one or more category tree nodes that are the immediate children of the current category tree node, as well as their children, recursively down to the leaf nodes. Returned only if the current category tree node is not a leaf node (the value of leafCategoryTreeNode is false).
     *
     * @return self
     */
    public function setChildCategoryTreeNodes($childCategoryTreeNodes)
    {
        $this->container['childCategoryTreeNodes'] = $childCategoryTreeNodes;

        return $this;
    }

    /**
     * Gets leafCategoryTreeNode
     *
     * @return bool|null
     */
    public function getLeafCategoryTreeNode()
    {
        return $this->container['leafCategoryTreeNode'];
    }

    /**
     * Sets leafCategoryTreeNode
     *
     * @param bool|null $leafCategoryTreeNode A value of true indicates that the current category tree node is a leaf node (it has no child nodes). A value of false indicates that the current node has one or more child nodes, which are identified by the childCategoryTreeNodes array. Returned only if the value of this field is true.
     *
     * @return self
     */
    public function setLeafCategoryTreeNode($leafCategoryTreeNode)
    {
        $this->container['leafCategoryTreeNode'] = $leafCategoryTreeNode;

        return $this;
    }

    /**
     * Gets parentCategoryTreeNodeHref
     *
     * @return string|null
     */
    public function getParentCategoryTreeNodeHref()
    {
        return $this->container['parentCategoryTreeNodeHref'];
    }

    /**
     * Sets parentCategoryTreeNodeHref
     *
     * @param string|null $parentCategoryTreeNodeHref The href portion of the getCategorySubtree call that retrieves the subtree below the parent of this category tree node. Not returned if the current category tree node is the root node of its tree.
     *
     * @return self
     */
    public function setParentCategoryTreeNodeHref($parentCategoryTreeNodeHref)
    {
        $this->container['parentCategoryTreeNodeHref'] = $parentCategoryTreeNodeHref;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


