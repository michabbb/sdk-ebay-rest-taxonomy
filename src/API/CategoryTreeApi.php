<?php
/**
 * CategoryTreeApi
 * PHP version 7.4
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\taxonomy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Taxonomy API
 *
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides metadata about the required and recommended category aspects to include in listings, and also has two operations to retrieve parts compatibility information.
 *
 * The version of the OpenAPI document: v1.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace macropage\SDKs\ebay\rest\taxonomy\API;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use macropage\SDKs\ebay\rest\taxonomy\ApiException;
use macropage\SDKs\ebay\rest\taxonomy\Configuration;
use macropage\SDKs\ebay\rest\taxonomy\HeaderSelector;
use macropage\SDKs\ebay\rest\taxonomy\ObjectSerializer;

/**
 * CategoryTreeApi Class Doc Comment
 *
 * @category Class
 * @package  macropage\SDKs\ebay\rest\taxonomy
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CategoryTreeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'fetchItemAspects' => [
            'application/json',
        ],
        'getCategorySubtree' => [
            'application/json',
        ],
        'getCategorySuggestions' => [
            'application/json',
        ],
        'getCategoryTree' => [
            'application/json',
        ],
        'getCompatibilityProperties' => [
            'application/json',
        ],
        'getCompatibilityPropertyValues' => [
            'application/json',
        ],
        'getDefaultCategoryTreeId' => [
            'application/json',
        ],
        'getExpiredCategories' => [
            'application/json',
        ],
        'getItemAspectsForCategory' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation fetchItemAspects
     *
     * Get Aspects for All Leaf Categories in a Marketplace
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchItemAspects'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\taxonomy\Model\GetCategoriesAspectResponse
     */
    public function fetchItemAspects($categoryTreeId, string $contentType = self::contentTypes['fetchItemAspects'][0])
    {
        list($response) = $this->fetchItemAspectsWithHttpInfo($categoryTreeId, $contentType);
        return $response;
    }

    /**
     * Operation fetchItemAspectsWithHttpInfo
     *
     * Get Aspects for All Leaf Categories in a Marketplace
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchItemAspects'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\taxonomy\Model\GetCategoriesAspectResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchItemAspectsWithHttpInfo($categoryTreeId, string $contentType = self::contentTypes['fetchItemAspects'][0])
    {
        $request = $this->fetchItemAspectsRequest($categoryTreeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\taxonomy\Model\GetCategoriesAspectResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\taxonomy\Model\GetCategoriesAspectResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\taxonomy\Model\GetCategoriesAspectResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\GetCategoriesAspectResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\taxonomy\Model\GetCategoriesAspectResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchItemAspectsAsync
     *
     * Get Aspects for All Leaf Categories in a Marketplace
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchItemAspects'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchItemAspectsAsync($categoryTreeId, string $contentType = self::contentTypes['fetchItemAspects'][0])
    {
        return $this->fetchItemAspectsAsyncWithHttpInfo($categoryTreeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchItemAspectsAsyncWithHttpInfo
     *
     * Get Aspects for All Leaf Categories in a Marketplace
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchItemAspects'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchItemAspectsAsyncWithHttpInfo($categoryTreeId, string $contentType = self::contentTypes['fetchItemAspects'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\GetCategoriesAspectResponse';
        $request = $this->fetchItemAspectsRequest($categoryTreeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchItemAspects'
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fetchItemAspects'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fetchItemAspectsRequest($categoryTreeId, string $contentType = self::contentTypes['fetchItemAspects'][0])
    {

        // verify the required parameter 'categoryTreeId' is set
        if ($categoryTreeId === null || (is_array($categoryTreeId) && count($categoryTreeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryTreeId when calling fetchItemAspects'
            );
        }


        $resourcePath = '/category_tree/{category_tree_id}/fetch_item_aspects';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($categoryTreeId !== null) {
            $resourcePath = str_replace(
                '{' . 'category_tree_id' . '}',
                ObjectSerializer::toPathValue($categoryTreeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCategorySubtree
     *
     * Get a Category Subtree
     *
     * @param  string $categoryId The unique identifier of the category at the top of the subtree being requested. Metadata on this category and all its descendant categories are retrieved.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the &lt;b&gt;category_id&lt;/b&gt; submitted identifies a leaf node of the tree, the call response will contain information about only that leaf node, which is a valid subtree.&lt;!-- &lt;br&gt;&lt;br&gt; This call also returns an error if &lt;b&gt;category_id&lt;/b&gt; identifies a deprecated category. This can occur if you routinely cache your category trees. Use the &lt;b&gt;Get Deprecated Categories and Mapping&lt;/b&gt; call to determine which current category should be used in place of the deprecated category, and use the &lt;b&gt;getCategoryTree&lt;/b&gt; call to update your cached copy of the tree. --&gt; &lt;/span&gt; (required)
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $acceptEncoding This header indicates the compression-encoding algorithms the client accepts for the response. This value should be set to &lt;code&gt;gzip&lt;/code&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategorySubtree'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\taxonomy\Model\CategorySubtree
     */
    public function getCategorySubtree($categoryId, $categoryTreeId, $acceptEncoding = null, string $contentType = self::contentTypes['getCategorySubtree'][0])
    {
        list($response) = $this->getCategorySubtreeWithHttpInfo($categoryId, $categoryTreeId, $acceptEncoding, $contentType);
        return $response;
    }

    /**
     * Operation getCategorySubtreeWithHttpInfo
     *
     * Get a Category Subtree
     *
     * @param  string $categoryId The unique identifier of the category at the top of the subtree being requested. Metadata on this category and all its descendant categories are retrieved.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the &lt;b&gt;category_id&lt;/b&gt; submitted identifies a leaf node of the tree, the call response will contain information about only that leaf node, which is a valid subtree.&lt;!-- &lt;br&gt;&lt;br&gt; This call also returns an error if &lt;b&gt;category_id&lt;/b&gt; identifies a deprecated category. This can occur if you routinely cache your category trees. Use the &lt;b&gt;Get Deprecated Categories and Mapping&lt;/b&gt; call to determine which current category should be used in place of the deprecated category, and use the &lt;b&gt;getCategoryTree&lt;/b&gt; call to update your cached copy of the tree. --&gt; &lt;/span&gt; (required)
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $acceptEncoding This header indicates the compression-encoding algorithms the client accepts for the response. This value should be set to &lt;code&gt;gzip&lt;/code&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategorySubtree'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\taxonomy\Model\CategorySubtree, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategorySubtreeWithHttpInfo($categoryId, $categoryTreeId, $acceptEncoding = null, string $contentType = self::contentTypes['getCategorySubtree'][0])
    {
        $request = $this->getCategorySubtreeRequest($categoryId, $categoryTreeId, $acceptEncoding, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\taxonomy\Model\CategorySubtree' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\taxonomy\Model\CategorySubtree' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\taxonomy\Model\CategorySubtree', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\CategorySubtree';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\taxonomy\Model\CategorySubtree',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCategorySubtreeAsync
     *
     * Get a Category Subtree
     *
     * @param  string $categoryId The unique identifier of the category at the top of the subtree being requested. Metadata on this category and all its descendant categories are retrieved.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the &lt;b&gt;category_id&lt;/b&gt; submitted identifies a leaf node of the tree, the call response will contain information about only that leaf node, which is a valid subtree.&lt;!-- &lt;br&gt;&lt;br&gt; This call also returns an error if &lt;b&gt;category_id&lt;/b&gt; identifies a deprecated category. This can occur if you routinely cache your category trees. Use the &lt;b&gt;Get Deprecated Categories and Mapping&lt;/b&gt; call to determine which current category should be used in place of the deprecated category, and use the &lt;b&gt;getCategoryTree&lt;/b&gt; call to update your cached copy of the tree. --&gt; &lt;/span&gt; (required)
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $acceptEncoding This header indicates the compression-encoding algorithms the client accepts for the response. This value should be set to &lt;code&gt;gzip&lt;/code&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategorySubtree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategorySubtreeAsync($categoryId, $categoryTreeId, $acceptEncoding = null, string $contentType = self::contentTypes['getCategorySubtree'][0])
    {
        return $this->getCategorySubtreeAsyncWithHttpInfo($categoryId, $categoryTreeId, $acceptEncoding, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCategorySubtreeAsyncWithHttpInfo
     *
     * Get a Category Subtree
     *
     * @param  string $categoryId The unique identifier of the category at the top of the subtree being requested. Metadata on this category and all its descendant categories are retrieved.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the &lt;b&gt;category_id&lt;/b&gt; submitted identifies a leaf node of the tree, the call response will contain information about only that leaf node, which is a valid subtree.&lt;!-- &lt;br&gt;&lt;br&gt; This call also returns an error if &lt;b&gt;category_id&lt;/b&gt; identifies a deprecated category. This can occur if you routinely cache your category trees. Use the &lt;b&gt;Get Deprecated Categories and Mapping&lt;/b&gt; call to determine which current category should be used in place of the deprecated category, and use the &lt;b&gt;getCategoryTree&lt;/b&gt; call to update your cached copy of the tree. --&gt; &lt;/span&gt; (required)
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $acceptEncoding This header indicates the compression-encoding algorithms the client accepts for the response. This value should be set to &lt;code&gt;gzip&lt;/code&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategorySubtree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategorySubtreeAsyncWithHttpInfo($categoryId, $categoryTreeId, $acceptEncoding = null, string $contentType = self::contentTypes['getCategorySubtree'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\CategorySubtree';
        $request = $this->getCategorySubtreeRequest($categoryId, $categoryTreeId, $acceptEncoding, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCategorySubtree'
     *
     * @param  string $categoryId The unique identifier of the category at the top of the subtree being requested. Metadata on this category and all its descendant categories are retrieved.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the &lt;b&gt;category_id&lt;/b&gt; submitted identifies a leaf node of the tree, the call response will contain information about only that leaf node, which is a valid subtree.&lt;!-- &lt;br&gt;&lt;br&gt; This call also returns an error if &lt;b&gt;category_id&lt;/b&gt; identifies a deprecated category. This can occur if you routinely cache your category trees. Use the &lt;b&gt;Get Deprecated Categories and Mapping&lt;/b&gt; call to determine which current category should be used in place of the deprecated category, and use the &lt;b&gt;getCategoryTree&lt;/b&gt; call to update your cached copy of the tree. --&gt; &lt;/span&gt; (required)
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $acceptEncoding This header indicates the compression-encoding algorithms the client accepts for the response. This value should be set to &lt;code&gt;gzip&lt;/code&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategorySubtree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCategorySubtreeRequest($categoryId, $categoryTreeId, $acceptEncoding = null, string $contentType = self::contentTypes['getCategorySubtree'][0])
    {

        // verify the required parameter 'categoryId' is set
        if ($categoryId === null || (is_array($categoryId) && count($categoryId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryId when calling getCategorySubtree'
            );
        }

        // verify the required parameter 'categoryTreeId' is set
        if ($categoryTreeId === null || (is_array($categoryTreeId) && count($categoryTreeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryTreeId when calling getCategorySubtree'
            );
        }



        $resourcePath = '/category_tree/{category_tree_id}/get_category_subtree';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $categoryId,
            'category_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($acceptEncoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($acceptEncoding);
        }

        // path params
        if ($categoryTreeId !== null) {
            $resourcePath = str_replace(
                '{' . 'category_tree_id' . '}',
                ObjectSerializer::toPathValue($categoryTreeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCategorySuggestions
     *
     * Get Suggested Categories
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $q A quoted string that describes or characterizes the item being offered for sale. The string format is free form, and can contain any combination of phrases or keywords. eBay will parse the string and return suggested categories for the item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategorySuggestions'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\taxonomy\Model\CategorySuggestionResponse
     */
    public function getCategorySuggestions($categoryTreeId, $q, string $contentType = self::contentTypes['getCategorySuggestions'][0])
    {
        list($response) = $this->getCategorySuggestionsWithHttpInfo($categoryTreeId, $q, $contentType);
        return $response;
    }

    /**
     * Operation getCategorySuggestionsWithHttpInfo
     *
     * Get Suggested Categories
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $q A quoted string that describes or characterizes the item being offered for sale. The string format is free form, and can contain any combination of phrases or keywords. eBay will parse the string and return suggested categories for the item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategorySuggestions'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\taxonomy\Model\CategorySuggestionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategorySuggestionsWithHttpInfo($categoryTreeId, $q, string $contentType = self::contentTypes['getCategorySuggestions'][0])
    {
        $request = $this->getCategorySuggestionsRequest($categoryTreeId, $q, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\taxonomy\Model\CategorySuggestionResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\taxonomy\Model\CategorySuggestionResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\taxonomy\Model\CategorySuggestionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\CategorySuggestionResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\taxonomy\Model\CategorySuggestionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCategorySuggestionsAsync
     *
     * Get Suggested Categories
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $q A quoted string that describes or characterizes the item being offered for sale. The string format is free form, and can contain any combination of phrases or keywords. eBay will parse the string and return suggested categories for the item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategorySuggestions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategorySuggestionsAsync($categoryTreeId, $q, string $contentType = self::contentTypes['getCategorySuggestions'][0])
    {
        return $this->getCategorySuggestionsAsyncWithHttpInfo($categoryTreeId, $q, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCategorySuggestionsAsyncWithHttpInfo
     *
     * Get Suggested Categories
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $q A quoted string that describes or characterizes the item being offered for sale. The string format is free form, and can contain any combination of phrases or keywords. eBay will parse the string and return suggested categories for the item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategorySuggestions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategorySuggestionsAsyncWithHttpInfo($categoryTreeId, $q, string $contentType = self::contentTypes['getCategorySuggestions'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\CategorySuggestionResponse';
        $request = $this->getCategorySuggestionsRequest($categoryTreeId, $q, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCategorySuggestions'
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $q A quoted string that describes or characterizes the item being offered for sale. The string format is free form, and can contain any combination of phrases or keywords. eBay will parse the string and return suggested categories for the item. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategorySuggestions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCategorySuggestionsRequest($categoryTreeId, $q, string $contentType = self::contentTypes['getCategorySuggestions'][0])
    {

        // verify the required parameter 'categoryTreeId' is set
        if ($categoryTreeId === null || (is_array($categoryTreeId) && count($categoryTreeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryTreeId when calling getCategorySuggestions'
            );
        }

        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling getCategorySuggestions'
            );
        }


        $resourcePath = '/category_tree/{category_tree_id}/get_category_suggestions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($categoryTreeId !== null) {
            $resourcePath = str_replace(
                '{' . 'category_tree_id' . '}',
                ObjectSerializer::toPathValue($categoryTreeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCategoryTree
     *
     * Get a Category Tree
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $acceptEncoding This header indicates the compression-encoding algorithms the client accepts for the response. This value should be set to &lt;code&gt;gzip&lt;/code&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryTree'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\taxonomy\Model\CategoryTree
     */
    public function getCategoryTree($categoryTreeId, $acceptEncoding = null, string $contentType = self::contentTypes['getCategoryTree'][0])
    {
        list($response) = $this->getCategoryTreeWithHttpInfo($categoryTreeId, $acceptEncoding, $contentType);
        return $response;
    }

    /**
     * Operation getCategoryTreeWithHttpInfo
     *
     * Get a Category Tree
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $acceptEncoding This header indicates the compression-encoding algorithms the client accepts for the response. This value should be set to &lt;code&gt;gzip&lt;/code&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryTree'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\taxonomy\Model\CategoryTree, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCategoryTreeWithHttpInfo($categoryTreeId, $acceptEncoding = null, string $contentType = self::contentTypes['getCategoryTree'][0])
    {
        $request = $this->getCategoryTreeRequest($categoryTreeId, $acceptEncoding, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\taxonomy\Model\CategoryTree' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\taxonomy\Model\CategoryTree' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\taxonomy\Model\CategoryTree', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\CategoryTree';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\taxonomy\Model\CategoryTree',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCategoryTreeAsync
     *
     * Get a Category Tree
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $acceptEncoding This header indicates the compression-encoding algorithms the client accepts for the response. This value should be set to &lt;code&gt;gzip&lt;/code&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryTree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoryTreeAsync($categoryTreeId, $acceptEncoding = null, string $contentType = self::contentTypes['getCategoryTree'][0])
    {
        return $this->getCategoryTreeAsyncWithHttpInfo($categoryTreeId, $acceptEncoding, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCategoryTreeAsyncWithHttpInfo
     *
     * Get a Category Tree
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $acceptEncoding This header indicates the compression-encoding algorithms the client accepts for the response. This value should be set to &lt;code&gt;gzip&lt;/code&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryTree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCategoryTreeAsyncWithHttpInfo($categoryTreeId, $acceptEncoding = null, string $contentType = self::contentTypes['getCategoryTree'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\CategoryTree';
        $request = $this->getCategoryTreeRequest($categoryTreeId, $acceptEncoding, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCategoryTree'
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $acceptEncoding This header indicates the compression-encoding algorithms the client accepts for the response. This value should be set to &lt;code&gt;gzip&lt;/code&gt;. &lt;br&gt;&lt;br&gt; For more information, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#HTTP\&quot; target&#x3D;\&quot;_blank \&quot;&gt;HTTP request headers&lt;/a&gt;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCategoryTree'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCategoryTreeRequest($categoryTreeId, $acceptEncoding = null, string $contentType = self::contentTypes['getCategoryTree'][0])
    {

        // verify the required parameter 'categoryTreeId' is set
        if ($categoryTreeId === null || (is_array($categoryTreeId) && count($categoryTreeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryTreeId when calling getCategoryTree'
            );
        }



        $resourcePath = '/category_tree/{category_tree_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($acceptEncoding !== null) {
            $headerParams['Accept-Encoding'] = ObjectSerializer::toHeaderValue($acceptEncoding);
        }

        // path params
        if ($categoryTreeId !== null) {
            $resourcePath = str_replace(
                '{' . 'category_tree_id' . '}',
                ObjectSerializer::toPathValue($categoryTreeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompatibilityProperties
     *
     * Get Compatibility Properties
     *
     * @param  string $categoryTreeId This is the unique identifier of category tree. The following is the list of &lt;strong&gt;category_tree_id&lt;/strong&gt; values and the eBay marketplaces that they represent. One of these ID values must be passed in as a path parameter, and the &lt;strong&gt;category_id&lt;/strong&gt; value, that is passed in as query parameter, must be a valid eBay category on that eBay marketplace that supports parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;eBay US: 0&lt;/li&gt;&lt;li&gt;eBay Motors US: 100&lt;/li&gt;&lt;li&gt;eBay Canada: 2&lt;/li&gt;&lt;li&gt;eBay UK: 3&lt;/li&gt;&lt;li&gt;eBay Germany: 77&lt;/li&gt;&lt;li&gt;eBay Australia: 15&lt;/li&gt;&lt;li&gt;eBay France: 71&lt;/li&gt;&lt;li&gt;eBay Italy: 101&lt;/li&gt;&lt;li&gt;eBay Spain: 186&lt;/li&gt;&lt;/ul&gt; (required)
     * @param  string $categoryId The unique identifier of an eBay category. This eBay category must be a valid eBay category on the specified eBay marketplace, and the category must support parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt; The &lt;b&gt;getAutomotivePartsCompatibilityPolicies&lt;/b&gt; method of the Selling Metadata API can be used to retrieve all eBay categories for an eBay marketplace that support parts compatibility for vehicles. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityProperties'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityMetadataResponse
     */
    public function getCompatibilityProperties($categoryTreeId, $categoryId, string $contentType = self::contentTypes['getCompatibilityProperties'][0])
    {
        list($response) = $this->getCompatibilityPropertiesWithHttpInfo($categoryTreeId, $categoryId, $contentType);
        return $response;
    }

    /**
     * Operation getCompatibilityPropertiesWithHttpInfo
     *
     * Get Compatibility Properties
     *
     * @param  string $categoryTreeId This is the unique identifier of category tree. The following is the list of &lt;strong&gt;category_tree_id&lt;/strong&gt; values and the eBay marketplaces that they represent. One of these ID values must be passed in as a path parameter, and the &lt;strong&gt;category_id&lt;/strong&gt; value, that is passed in as query parameter, must be a valid eBay category on that eBay marketplace that supports parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;eBay US: 0&lt;/li&gt;&lt;li&gt;eBay Motors US: 100&lt;/li&gt;&lt;li&gt;eBay Canada: 2&lt;/li&gt;&lt;li&gt;eBay UK: 3&lt;/li&gt;&lt;li&gt;eBay Germany: 77&lt;/li&gt;&lt;li&gt;eBay Australia: 15&lt;/li&gt;&lt;li&gt;eBay France: 71&lt;/li&gt;&lt;li&gt;eBay Italy: 101&lt;/li&gt;&lt;li&gt;eBay Spain: 186&lt;/li&gt;&lt;/ul&gt; (required)
     * @param  string $categoryId The unique identifier of an eBay category. This eBay category must be a valid eBay category on the specified eBay marketplace, and the category must support parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt; The &lt;b&gt;getAutomotivePartsCompatibilityPolicies&lt;/b&gt; method of the Selling Metadata API can be used to retrieve all eBay categories for an eBay marketplace that support parts compatibility for vehicles. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityProperties'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityMetadataResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompatibilityPropertiesWithHttpInfo($categoryTreeId, $categoryId, string $contentType = self::contentTypes['getCompatibilityProperties'][0])
    {
        $request = $this->getCompatibilityPropertiesRequest($categoryTreeId, $categoryId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityMetadataResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityMetadataResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityMetadataResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityMetadataResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityMetadataResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompatibilityPropertiesAsync
     *
     * Get Compatibility Properties
     *
     * @param  string $categoryTreeId This is the unique identifier of category tree. The following is the list of &lt;strong&gt;category_tree_id&lt;/strong&gt; values and the eBay marketplaces that they represent. One of these ID values must be passed in as a path parameter, and the &lt;strong&gt;category_id&lt;/strong&gt; value, that is passed in as query parameter, must be a valid eBay category on that eBay marketplace that supports parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;eBay US: 0&lt;/li&gt;&lt;li&gt;eBay Motors US: 100&lt;/li&gt;&lt;li&gt;eBay Canada: 2&lt;/li&gt;&lt;li&gt;eBay UK: 3&lt;/li&gt;&lt;li&gt;eBay Germany: 77&lt;/li&gt;&lt;li&gt;eBay Australia: 15&lt;/li&gt;&lt;li&gt;eBay France: 71&lt;/li&gt;&lt;li&gt;eBay Italy: 101&lt;/li&gt;&lt;li&gt;eBay Spain: 186&lt;/li&gt;&lt;/ul&gt; (required)
     * @param  string $categoryId The unique identifier of an eBay category. This eBay category must be a valid eBay category on the specified eBay marketplace, and the category must support parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt; The &lt;b&gt;getAutomotivePartsCompatibilityPolicies&lt;/b&gt; method of the Selling Metadata API can be used to retrieve all eBay categories for an eBay marketplace that support parts compatibility for vehicles. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompatibilityPropertiesAsync($categoryTreeId, $categoryId, string $contentType = self::contentTypes['getCompatibilityProperties'][0])
    {
        return $this->getCompatibilityPropertiesAsyncWithHttpInfo($categoryTreeId, $categoryId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompatibilityPropertiesAsyncWithHttpInfo
     *
     * Get Compatibility Properties
     *
     * @param  string $categoryTreeId This is the unique identifier of category tree. The following is the list of &lt;strong&gt;category_tree_id&lt;/strong&gt; values and the eBay marketplaces that they represent. One of these ID values must be passed in as a path parameter, and the &lt;strong&gt;category_id&lt;/strong&gt; value, that is passed in as query parameter, must be a valid eBay category on that eBay marketplace that supports parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;eBay US: 0&lt;/li&gt;&lt;li&gt;eBay Motors US: 100&lt;/li&gt;&lt;li&gt;eBay Canada: 2&lt;/li&gt;&lt;li&gt;eBay UK: 3&lt;/li&gt;&lt;li&gt;eBay Germany: 77&lt;/li&gt;&lt;li&gt;eBay Australia: 15&lt;/li&gt;&lt;li&gt;eBay France: 71&lt;/li&gt;&lt;li&gt;eBay Italy: 101&lt;/li&gt;&lt;li&gt;eBay Spain: 186&lt;/li&gt;&lt;/ul&gt; (required)
     * @param  string $categoryId The unique identifier of an eBay category. This eBay category must be a valid eBay category on the specified eBay marketplace, and the category must support parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt; The &lt;b&gt;getAutomotivePartsCompatibilityPolicies&lt;/b&gt; method of the Selling Metadata API can be used to retrieve all eBay categories for an eBay marketplace that support parts compatibility for vehicles. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompatibilityPropertiesAsyncWithHttpInfo($categoryTreeId, $categoryId, string $contentType = self::contentTypes['getCompatibilityProperties'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityMetadataResponse';
        $request = $this->getCompatibilityPropertiesRequest($categoryTreeId, $categoryId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompatibilityProperties'
     *
     * @param  string $categoryTreeId This is the unique identifier of category tree. The following is the list of &lt;strong&gt;category_tree_id&lt;/strong&gt; values and the eBay marketplaces that they represent. One of these ID values must be passed in as a path parameter, and the &lt;strong&gt;category_id&lt;/strong&gt; value, that is passed in as query parameter, must be a valid eBay category on that eBay marketplace that supports parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;eBay US: 0&lt;/li&gt;&lt;li&gt;eBay Motors US: 100&lt;/li&gt;&lt;li&gt;eBay Canada: 2&lt;/li&gt;&lt;li&gt;eBay UK: 3&lt;/li&gt;&lt;li&gt;eBay Germany: 77&lt;/li&gt;&lt;li&gt;eBay Australia: 15&lt;/li&gt;&lt;li&gt;eBay France: 71&lt;/li&gt;&lt;li&gt;eBay Italy: 101&lt;/li&gt;&lt;li&gt;eBay Spain: 186&lt;/li&gt;&lt;/ul&gt; (required)
     * @param  string $categoryId The unique identifier of an eBay category. This eBay category must be a valid eBay category on the specified eBay marketplace, and the category must support parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt; The &lt;b&gt;getAutomotivePartsCompatibilityPolicies&lt;/b&gt; method of the Selling Metadata API can be used to retrieve all eBay categories for an eBay marketplace that support parts compatibility for vehicles. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityProperties'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompatibilityPropertiesRequest($categoryTreeId, $categoryId, string $contentType = self::contentTypes['getCompatibilityProperties'][0])
    {

        // verify the required parameter 'categoryTreeId' is set
        if ($categoryTreeId === null || (is_array($categoryTreeId) && count($categoryTreeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryTreeId when calling getCompatibilityProperties'
            );
        }

        // verify the required parameter 'categoryId' is set
        if ($categoryId === null || (is_array($categoryId) && count($categoryId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryId when calling getCompatibilityProperties'
            );
        }


        $resourcePath = '/category_tree/{category_tree_id}/get_compatibility_properties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $categoryId,
            'category_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($categoryTreeId !== null) {
            $resourcePath = str_replace(
                '{' . 'category_tree_id' . '}',
                ObjectSerializer::toPathValue($categoryTreeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCompatibilityPropertyValues
     *
     * Get Compatibility Property Values
     *
     * @param  string $categoryTreeId This is the unique identifier of the category tree. The following is the list of &lt;strong&gt;category_tree_id&lt;/strong&gt; values and the eBay marketplaces that they represent. One of these ID values must be passed in as a path parameter, and the &lt;strong&gt;category_id&lt;/strong&gt; value, that is passed in as query parameter, must be a valid eBay category on that eBay marketplace that supports parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;eBay US: 0&lt;/li&gt;&lt;li&gt;eBay Motors US: 100&lt;/li&gt;&lt;li&gt;eBay Canada: 2&lt;/li&gt;&lt;li&gt;eBay UK: 3&lt;/li&gt;&lt;li&gt;eBay Germany: 77&lt;/li&gt;&lt;li&gt;eBay Australia: 15&lt;/li&gt;&lt;li&gt;eBay France: 71&lt;/li&gt;&lt;li&gt;eBay Italy: 101&lt;/li&gt;&lt;li&gt;eBay Spain: 186&lt;/li&gt;&lt;/ul&gt; (required)
     * @param  string $compatibilityProperty One compatible vehicle property applicable to the specified eBay marketplace and eBay category is specified in this required filter. Compatible vehicle properties are returned in the &lt;strong&gt;compatibilityProperties.name&lt;/strong&gt; field of a &lt;strong&gt;getCompatibilityProperties&lt;/strong&gt; response. &lt;br&gt;&lt;br&gt; For example, if you wanted to retrieve all vehicle trims for a 2018 Toyota Camry, you would set this filter as follows: &lt;code&gt;compatibility_property&#x3D;Trim&lt;/code&gt; and then include the following three name/value filters through one &lt;strong&gt;filter&lt;/strong&gt; parameter: &lt;code&gt;filter&#x3D;Year:2018,Make:Toyota,Model:Camry&lt;/code&gt;.&lt;br&gt;&lt;br&gt;So, putting this all together, the URI would look something like this:&lt;br&gt;&lt;br&gt;&lt;pre&gt;&lt;code&gt;GET https://api.ebay.com/commerce/&lt;br&gt;taxonomy/v1/category_tree/100/&lt;br&gt;get_compatibility_property_values?&lt;br&gt;&lt;strong&gt;category_id&lt;/strong&gt;&#x3D;6016&amp;&lt;strong&gt;compatibility_property&lt;/strong&gt;&#x3D;Trim&lt;br&gt;&amp;&lt;strong&gt;filter&lt;/strong&gt;&#x3D;Year:2018,Make:Toyota,Model:Camry&lt;/code&gt;&lt;/pre&gt; (required)
     * @param  string $categoryId The unique identifier of an eBay category. This eBay category must be a valid eBay category on the specified eBay marketplace, and the category must support parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt; The &lt;strong&gt;getAutomotivePartsCompatibilityPolicies&lt;/strong&gt; method of the Selling Metadata API can be used to retrieve all eBay categories for an eBay marketplace that support parts compatibility for vehicles. (required)
     * @param  string $filter One or more compatible vehicle property name/value pairs are passed in through this query parameter. The compatible vehicle property name and corresponding value are delimited with a colon (:), such as &lt;code&gt;filter&#x3D;Year:2018&lt;/code&gt;, and multiple compatible vehicle property name/value pairs are delimited with a comma (,).&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; Commas are used as delimiters between filter values. If a value includes a comma (e.g., &lt;code&gt;BodyStyle:AWD B9 8W5&lt;b&gt;,&lt;/b&gt;C8WD&lt;/code&gt;) you &lt;b&gt;must&lt;/b&gt; include a backslash (&lt;b&gt;\\&lt;/b&gt;) immediately before the comma to prevent it from being evaluated as a delimiter.&lt;br&gt;&lt;br&gt;As with all query parameter values, the filter parameters must be URL encoded. For more information about encoding request parameters, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;URL encoding query parameter values&lt;/a&gt;.&lt;/span&gt;&lt;br&gt;For example, to retrieve all vehicle trims for a 2022 Audi A4:&lt;ul&gt;&lt;li&gt;Set the &lt;strong&gt;compatibility_property&lt;/strong&gt; filter to &lt;code&gt;compatibility_property&#x3D;Trim&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Include the following name/value filters using one &lt;strong&gt;filter&lt;/strong&gt; parameter:&lt;ul&gt;&lt;li&gt;&lt;code&gt;Year:2022&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Make:Audi&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Model:A4&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;BodyStyle:AWD B9 8W5\\,8WD&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;The resulting comma-separated filter query parameter is:&lt;pre&gt;&lt;code&gt;filter&#x3D;Year:2022,Make:Audi,Model:A4,BodyStyle:AWD B9 8W5\\,8WD&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;The following sample shows the same filter but with URL encoding for the blank spaces.&lt;br&gt;&lt;pre&gt;&lt;code&gt;GET https://api.ebay.com/commerce/&lt;br&gt;taxonomy/v1/category_tree/100/&lt;br&gt;get_compatibility_property_values?&lt;b&gt;category_id&lt;/b&gt;&#x3D;6016&amp;&lt;b&gt;compatibility_property&lt;/b&gt;&#x3D;Trim&amp;&lt;b&gt;filter&lt;/b&gt;&#x3D;Year:2022,Make:Audi,Model:A4,BodyStyle:AWD%20B9%208W5%5C%2C8WD&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; While not required, it is strongly recommended that users limit the size of the result set by using the &lt;b&gt;filter&lt;/b&gt; query parameter. Failure to do so may result in a timeout error if too much data is attempted to be returned.&lt;/span&gt; For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:ConstraintFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityPropertyValues'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityPropertyValuesResponse
     */
    public function getCompatibilityPropertyValues($categoryTreeId, $compatibilityProperty, $categoryId, $filter = null, string $contentType = self::contentTypes['getCompatibilityPropertyValues'][0])
    {
        list($response) = $this->getCompatibilityPropertyValuesWithHttpInfo($categoryTreeId, $compatibilityProperty, $categoryId, $filter, $contentType);
        return $response;
    }

    /**
     * Operation getCompatibilityPropertyValuesWithHttpInfo
     *
     * Get Compatibility Property Values
     *
     * @param  string $categoryTreeId This is the unique identifier of the category tree. The following is the list of &lt;strong&gt;category_tree_id&lt;/strong&gt; values and the eBay marketplaces that they represent. One of these ID values must be passed in as a path parameter, and the &lt;strong&gt;category_id&lt;/strong&gt; value, that is passed in as query parameter, must be a valid eBay category on that eBay marketplace that supports parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;eBay US: 0&lt;/li&gt;&lt;li&gt;eBay Motors US: 100&lt;/li&gt;&lt;li&gt;eBay Canada: 2&lt;/li&gt;&lt;li&gt;eBay UK: 3&lt;/li&gt;&lt;li&gt;eBay Germany: 77&lt;/li&gt;&lt;li&gt;eBay Australia: 15&lt;/li&gt;&lt;li&gt;eBay France: 71&lt;/li&gt;&lt;li&gt;eBay Italy: 101&lt;/li&gt;&lt;li&gt;eBay Spain: 186&lt;/li&gt;&lt;/ul&gt; (required)
     * @param  string $compatibilityProperty One compatible vehicle property applicable to the specified eBay marketplace and eBay category is specified in this required filter. Compatible vehicle properties are returned in the &lt;strong&gt;compatibilityProperties.name&lt;/strong&gt; field of a &lt;strong&gt;getCompatibilityProperties&lt;/strong&gt; response. &lt;br&gt;&lt;br&gt; For example, if you wanted to retrieve all vehicle trims for a 2018 Toyota Camry, you would set this filter as follows: &lt;code&gt;compatibility_property&#x3D;Trim&lt;/code&gt; and then include the following three name/value filters through one &lt;strong&gt;filter&lt;/strong&gt; parameter: &lt;code&gt;filter&#x3D;Year:2018,Make:Toyota,Model:Camry&lt;/code&gt;.&lt;br&gt;&lt;br&gt;So, putting this all together, the URI would look something like this:&lt;br&gt;&lt;br&gt;&lt;pre&gt;&lt;code&gt;GET https://api.ebay.com/commerce/&lt;br&gt;taxonomy/v1/category_tree/100/&lt;br&gt;get_compatibility_property_values?&lt;br&gt;&lt;strong&gt;category_id&lt;/strong&gt;&#x3D;6016&amp;&lt;strong&gt;compatibility_property&lt;/strong&gt;&#x3D;Trim&lt;br&gt;&amp;&lt;strong&gt;filter&lt;/strong&gt;&#x3D;Year:2018,Make:Toyota,Model:Camry&lt;/code&gt;&lt;/pre&gt; (required)
     * @param  string $categoryId The unique identifier of an eBay category. This eBay category must be a valid eBay category on the specified eBay marketplace, and the category must support parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt; The &lt;strong&gt;getAutomotivePartsCompatibilityPolicies&lt;/strong&gt; method of the Selling Metadata API can be used to retrieve all eBay categories for an eBay marketplace that support parts compatibility for vehicles. (required)
     * @param  string $filter One or more compatible vehicle property name/value pairs are passed in through this query parameter. The compatible vehicle property name and corresponding value are delimited with a colon (:), such as &lt;code&gt;filter&#x3D;Year:2018&lt;/code&gt;, and multiple compatible vehicle property name/value pairs are delimited with a comma (,).&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; Commas are used as delimiters between filter values. If a value includes a comma (e.g., &lt;code&gt;BodyStyle:AWD B9 8W5&lt;b&gt;,&lt;/b&gt;C8WD&lt;/code&gt;) you &lt;b&gt;must&lt;/b&gt; include a backslash (&lt;b&gt;\\&lt;/b&gt;) immediately before the comma to prevent it from being evaluated as a delimiter.&lt;br&gt;&lt;br&gt;As with all query parameter values, the filter parameters must be URL encoded. For more information about encoding request parameters, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;URL encoding query parameter values&lt;/a&gt;.&lt;/span&gt;&lt;br&gt;For example, to retrieve all vehicle trims for a 2022 Audi A4:&lt;ul&gt;&lt;li&gt;Set the &lt;strong&gt;compatibility_property&lt;/strong&gt; filter to &lt;code&gt;compatibility_property&#x3D;Trim&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Include the following name/value filters using one &lt;strong&gt;filter&lt;/strong&gt; parameter:&lt;ul&gt;&lt;li&gt;&lt;code&gt;Year:2022&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Make:Audi&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Model:A4&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;BodyStyle:AWD B9 8W5\\,8WD&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;The resulting comma-separated filter query parameter is:&lt;pre&gt;&lt;code&gt;filter&#x3D;Year:2022,Make:Audi,Model:A4,BodyStyle:AWD B9 8W5\\,8WD&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;The following sample shows the same filter but with URL encoding for the blank spaces.&lt;br&gt;&lt;pre&gt;&lt;code&gt;GET https://api.ebay.com/commerce/&lt;br&gt;taxonomy/v1/category_tree/100/&lt;br&gt;get_compatibility_property_values?&lt;b&gt;category_id&lt;/b&gt;&#x3D;6016&amp;&lt;b&gt;compatibility_property&lt;/b&gt;&#x3D;Trim&amp;&lt;b&gt;filter&lt;/b&gt;&#x3D;Year:2022,Make:Audi,Model:A4,BodyStyle:AWD%20B9%208W5%5C%2C8WD&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; While not required, it is strongly recommended that users limit the size of the result set by using the &lt;b&gt;filter&lt;/b&gt; query parameter. Failure to do so may result in a timeout error if too much data is attempted to be returned.&lt;/span&gt; For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:ConstraintFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityPropertyValues'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityPropertyValuesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCompatibilityPropertyValuesWithHttpInfo($categoryTreeId, $compatibilityProperty, $categoryId, $filter = null, string $contentType = self::contentTypes['getCompatibilityPropertyValues'][0])
    {
        $request = $this->getCompatibilityPropertyValuesRequest($categoryTreeId, $compatibilityProperty, $categoryId, $filter, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityPropertyValuesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityPropertyValuesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityPropertyValuesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityPropertyValuesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityPropertyValuesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCompatibilityPropertyValuesAsync
     *
     * Get Compatibility Property Values
     *
     * @param  string $categoryTreeId This is the unique identifier of the category tree. The following is the list of &lt;strong&gt;category_tree_id&lt;/strong&gt; values and the eBay marketplaces that they represent. One of these ID values must be passed in as a path parameter, and the &lt;strong&gt;category_id&lt;/strong&gt; value, that is passed in as query parameter, must be a valid eBay category on that eBay marketplace that supports parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;eBay US: 0&lt;/li&gt;&lt;li&gt;eBay Motors US: 100&lt;/li&gt;&lt;li&gt;eBay Canada: 2&lt;/li&gt;&lt;li&gt;eBay UK: 3&lt;/li&gt;&lt;li&gt;eBay Germany: 77&lt;/li&gt;&lt;li&gt;eBay Australia: 15&lt;/li&gt;&lt;li&gt;eBay France: 71&lt;/li&gt;&lt;li&gt;eBay Italy: 101&lt;/li&gt;&lt;li&gt;eBay Spain: 186&lt;/li&gt;&lt;/ul&gt; (required)
     * @param  string $compatibilityProperty One compatible vehicle property applicable to the specified eBay marketplace and eBay category is specified in this required filter. Compatible vehicle properties are returned in the &lt;strong&gt;compatibilityProperties.name&lt;/strong&gt; field of a &lt;strong&gt;getCompatibilityProperties&lt;/strong&gt; response. &lt;br&gt;&lt;br&gt; For example, if you wanted to retrieve all vehicle trims for a 2018 Toyota Camry, you would set this filter as follows: &lt;code&gt;compatibility_property&#x3D;Trim&lt;/code&gt; and then include the following three name/value filters through one &lt;strong&gt;filter&lt;/strong&gt; parameter: &lt;code&gt;filter&#x3D;Year:2018,Make:Toyota,Model:Camry&lt;/code&gt;.&lt;br&gt;&lt;br&gt;So, putting this all together, the URI would look something like this:&lt;br&gt;&lt;br&gt;&lt;pre&gt;&lt;code&gt;GET https://api.ebay.com/commerce/&lt;br&gt;taxonomy/v1/category_tree/100/&lt;br&gt;get_compatibility_property_values?&lt;br&gt;&lt;strong&gt;category_id&lt;/strong&gt;&#x3D;6016&amp;&lt;strong&gt;compatibility_property&lt;/strong&gt;&#x3D;Trim&lt;br&gt;&amp;&lt;strong&gt;filter&lt;/strong&gt;&#x3D;Year:2018,Make:Toyota,Model:Camry&lt;/code&gt;&lt;/pre&gt; (required)
     * @param  string $categoryId The unique identifier of an eBay category. This eBay category must be a valid eBay category on the specified eBay marketplace, and the category must support parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt; The &lt;strong&gt;getAutomotivePartsCompatibilityPolicies&lt;/strong&gt; method of the Selling Metadata API can be used to retrieve all eBay categories for an eBay marketplace that support parts compatibility for vehicles. (required)
     * @param  string $filter One or more compatible vehicle property name/value pairs are passed in through this query parameter. The compatible vehicle property name and corresponding value are delimited with a colon (:), such as &lt;code&gt;filter&#x3D;Year:2018&lt;/code&gt;, and multiple compatible vehicle property name/value pairs are delimited with a comma (,).&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; Commas are used as delimiters between filter values. If a value includes a comma (e.g., &lt;code&gt;BodyStyle:AWD B9 8W5&lt;b&gt;,&lt;/b&gt;C8WD&lt;/code&gt;) you &lt;b&gt;must&lt;/b&gt; include a backslash (&lt;b&gt;\\&lt;/b&gt;) immediately before the comma to prevent it from being evaluated as a delimiter.&lt;br&gt;&lt;br&gt;As with all query parameter values, the filter parameters must be URL encoded. For more information about encoding request parameters, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;URL encoding query parameter values&lt;/a&gt;.&lt;/span&gt;&lt;br&gt;For example, to retrieve all vehicle trims for a 2022 Audi A4:&lt;ul&gt;&lt;li&gt;Set the &lt;strong&gt;compatibility_property&lt;/strong&gt; filter to &lt;code&gt;compatibility_property&#x3D;Trim&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Include the following name/value filters using one &lt;strong&gt;filter&lt;/strong&gt; parameter:&lt;ul&gt;&lt;li&gt;&lt;code&gt;Year:2022&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Make:Audi&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Model:A4&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;BodyStyle:AWD B9 8W5\\,8WD&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;The resulting comma-separated filter query parameter is:&lt;pre&gt;&lt;code&gt;filter&#x3D;Year:2022,Make:Audi,Model:A4,BodyStyle:AWD B9 8W5\\,8WD&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;The following sample shows the same filter but with URL encoding for the blank spaces.&lt;br&gt;&lt;pre&gt;&lt;code&gt;GET https://api.ebay.com/commerce/&lt;br&gt;taxonomy/v1/category_tree/100/&lt;br&gt;get_compatibility_property_values?&lt;b&gt;category_id&lt;/b&gt;&#x3D;6016&amp;&lt;b&gt;compatibility_property&lt;/b&gt;&#x3D;Trim&amp;&lt;b&gt;filter&lt;/b&gt;&#x3D;Year:2022,Make:Audi,Model:A4,BodyStyle:AWD%20B9%208W5%5C%2C8WD&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; While not required, it is strongly recommended that users limit the size of the result set by using the &lt;b&gt;filter&lt;/b&gt; query parameter. Failure to do so may result in a timeout error if too much data is attempted to be returned.&lt;/span&gt; For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:ConstraintFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityPropertyValues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompatibilityPropertyValuesAsync($categoryTreeId, $compatibilityProperty, $categoryId, $filter = null, string $contentType = self::contentTypes['getCompatibilityPropertyValues'][0])
    {
        return $this->getCompatibilityPropertyValuesAsyncWithHttpInfo($categoryTreeId, $compatibilityProperty, $categoryId, $filter, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCompatibilityPropertyValuesAsyncWithHttpInfo
     *
     * Get Compatibility Property Values
     *
     * @param  string $categoryTreeId This is the unique identifier of the category tree. The following is the list of &lt;strong&gt;category_tree_id&lt;/strong&gt; values and the eBay marketplaces that they represent. One of these ID values must be passed in as a path parameter, and the &lt;strong&gt;category_id&lt;/strong&gt; value, that is passed in as query parameter, must be a valid eBay category on that eBay marketplace that supports parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;eBay US: 0&lt;/li&gt;&lt;li&gt;eBay Motors US: 100&lt;/li&gt;&lt;li&gt;eBay Canada: 2&lt;/li&gt;&lt;li&gt;eBay UK: 3&lt;/li&gt;&lt;li&gt;eBay Germany: 77&lt;/li&gt;&lt;li&gt;eBay Australia: 15&lt;/li&gt;&lt;li&gt;eBay France: 71&lt;/li&gt;&lt;li&gt;eBay Italy: 101&lt;/li&gt;&lt;li&gt;eBay Spain: 186&lt;/li&gt;&lt;/ul&gt; (required)
     * @param  string $compatibilityProperty One compatible vehicle property applicable to the specified eBay marketplace and eBay category is specified in this required filter. Compatible vehicle properties are returned in the &lt;strong&gt;compatibilityProperties.name&lt;/strong&gt; field of a &lt;strong&gt;getCompatibilityProperties&lt;/strong&gt; response. &lt;br&gt;&lt;br&gt; For example, if you wanted to retrieve all vehicle trims for a 2018 Toyota Camry, you would set this filter as follows: &lt;code&gt;compatibility_property&#x3D;Trim&lt;/code&gt; and then include the following three name/value filters through one &lt;strong&gt;filter&lt;/strong&gt; parameter: &lt;code&gt;filter&#x3D;Year:2018,Make:Toyota,Model:Camry&lt;/code&gt;.&lt;br&gt;&lt;br&gt;So, putting this all together, the URI would look something like this:&lt;br&gt;&lt;br&gt;&lt;pre&gt;&lt;code&gt;GET https://api.ebay.com/commerce/&lt;br&gt;taxonomy/v1/category_tree/100/&lt;br&gt;get_compatibility_property_values?&lt;br&gt;&lt;strong&gt;category_id&lt;/strong&gt;&#x3D;6016&amp;&lt;strong&gt;compatibility_property&lt;/strong&gt;&#x3D;Trim&lt;br&gt;&amp;&lt;strong&gt;filter&lt;/strong&gt;&#x3D;Year:2018,Make:Toyota,Model:Camry&lt;/code&gt;&lt;/pre&gt; (required)
     * @param  string $categoryId The unique identifier of an eBay category. This eBay category must be a valid eBay category on the specified eBay marketplace, and the category must support parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt; The &lt;strong&gt;getAutomotivePartsCompatibilityPolicies&lt;/strong&gt; method of the Selling Metadata API can be used to retrieve all eBay categories for an eBay marketplace that support parts compatibility for vehicles. (required)
     * @param  string $filter One or more compatible vehicle property name/value pairs are passed in through this query parameter. The compatible vehicle property name and corresponding value are delimited with a colon (:), such as &lt;code&gt;filter&#x3D;Year:2018&lt;/code&gt;, and multiple compatible vehicle property name/value pairs are delimited with a comma (,).&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; Commas are used as delimiters between filter values. If a value includes a comma (e.g., &lt;code&gt;BodyStyle:AWD B9 8W5&lt;b&gt;,&lt;/b&gt;C8WD&lt;/code&gt;) you &lt;b&gt;must&lt;/b&gt; include a backslash (&lt;b&gt;\\&lt;/b&gt;) immediately before the comma to prevent it from being evaluated as a delimiter.&lt;br&gt;&lt;br&gt;As with all query parameter values, the filter parameters must be URL encoded. For more information about encoding request parameters, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;URL encoding query parameter values&lt;/a&gt;.&lt;/span&gt;&lt;br&gt;For example, to retrieve all vehicle trims for a 2022 Audi A4:&lt;ul&gt;&lt;li&gt;Set the &lt;strong&gt;compatibility_property&lt;/strong&gt; filter to &lt;code&gt;compatibility_property&#x3D;Trim&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Include the following name/value filters using one &lt;strong&gt;filter&lt;/strong&gt; parameter:&lt;ul&gt;&lt;li&gt;&lt;code&gt;Year:2022&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Make:Audi&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Model:A4&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;BodyStyle:AWD B9 8W5\\,8WD&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;The resulting comma-separated filter query parameter is:&lt;pre&gt;&lt;code&gt;filter&#x3D;Year:2022,Make:Audi,Model:A4,BodyStyle:AWD B9 8W5\\,8WD&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;The following sample shows the same filter but with URL encoding for the blank spaces.&lt;br&gt;&lt;pre&gt;&lt;code&gt;GET https://api.ebay.com/commerce/&lt;br&gt;taxonomy/v1/category_tree/100/&lt;br&gt;get_compatibility_property_values?&lt;b&gt;category_id&lt;/b&gt;&#x3D;6016&amp;&lt;b&gt;compatibility_property&lt;/b&gt;&#x3D;Trim&amp;&lt;b&gt;filter&lt;/b&gt;&#x3D;Year:2022,Make:Audi,Model:A4,BodyStyle:AWD%20B9%208W5%5C%2C8WD&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; While not required, it is strongly recommended that users limit the size of the result set by using the &lt;b&gt;filter&lt;/b&gt; query parameter. Failure to do so may result in a timeout error if too much data is attempted to be returned.&lt;/span&gt; For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:ConstraintFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityPropertyValues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCompatibilityPropertyValuesAsyncWithHttpInfo($categoryTreeId, $compatibilityProperty, $categoryId, $filter = null, string $contentType = self::contentTypes['getCompatibilityPropertyValues'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\GetCompatibilityPropertyValuesResponse';
        $request = $this->getCompatibilityPropertyValuesRequest($categoryTreeId, $compatibilityProperty, $categoryId, $filter, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCompatibilityPropertyValues'
     *
     * @param  string $categoryTreeId This is the unique identifier of the category tree. The following is the list of &lt;strong&gt;category_tree_id&lt;/strong&gt; values and the eBay marketplaces that they represent. One of these ID values must be passed in as a path parameter, and the &lt;strong&gt;category_id&lt;/strong&gt; value, that is passed in as query parameter, must be a valid eBay category on that eBay marketplace that supports parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;eBay US: 0&lt;/li&gt;&lt;li&gt;eBay Motors US: 100&lt;/li&gt;&lt;li&gt;eBay Canada: 2&lt;/li&gt;&lt;li&gt;eBay UK: 3&lt;/li&gt;&lt;li&gt;eBay Germany: 77&lt;/li&gt;&lt;li&gt;eBay Australia: 15&lt;/li&gt;&lt;li&gt;eBay France: 71&lt;/li&gt;&lt;li&gt;eBay Italy: 101&lt;/li&gt;&lt;li&gt;eBay Spain: 186&lt;/li&gt;&lt;/ul&gt; (required)
     * @param  string $compatibilityProperty One compatible vehicle property applicable to the specified eBay marketplace and eBay category is specified in this required filter. Compatible vehicle properties are returned in the &lt;strong&gt;compatibilityProperties.name&lt;/strong&gt; field of a &lt;strong&gt;getCompatibilityProperties&lt;/strong&gt; response. &lt;br&gt;&lt;br&gt; For example, if you wanted to retrieve all vehicle trims for a 2018 Toyota Camry, you would set this filter as follows: &lt;code&gt;compatibility_property&#x3D;Trim&lt;/code&gt; and then include the following three name/value filters through one &lt;strong&gt;filter&lt;/strong&gt; parameter: &lt;code&gt;filter&#x3D;Year:2018,Make:Toyota,Model:Camry&lt;/code&gt;.&lt;br&gt;&lt;br&gt;So, putting this all together, the URI would look something like this:&lt;br&gt;&lt;br&gt;&lt;pre&gt;&lt;code&gt;GET https://api.ebay.com/commerce/&lt;br&gt;taxonomy/v1/category_tree/100/&lt;br&gt;get_compatibility_property_values?&lt;br&gt;&lt;strong&gt;category_id&lt;/strong&gt;&#x3D;6016&amp;&lt;strong&gt;compatibility_property&lt;/strong&gt;&#x3D;Trim&lt;br&gt;&amp;&lt;strong&gt;filter&lt;/strong&gt;&#x3D;Year:2018,Make:Toyota,Model:Camry&lt;/code&gt;&lt;/pre&gt; (required)
     * @param  string $categoryId The unique identifier of an eBay category. This eBay category must be a valid eBay category on the specified eBay marketplace, and the category must support parts compatibility for cars, trucks, or motorcycles.&lt;br&gt;&lt;br&gt; The &lt;strong&gt;getAutomotivePartsCompatibilityPolicies&lt;/strong&gt; method of the Selling Metadata API can be used to retrieve all eBay categories for an eBay marketplace that support parts compatibility for vehicles. (required)
     * @param  string $filter One or more compatible vehicle property name/value pairs are passed in through this query parameter. The compatible vehicle property name and corresponding value are delimited with a colon (:), such as &lt;code&gt;filter&#x3D;Year:2018&lt;/code&gt;, and multiple compatible vehicle property name/value pairs are delimited with a comma (,).&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; Commas are used as delimiters between filter values. If a value includes a comma (e.g., &lt;code&gt;BodyStyle:AWD B9 8W5&lt;b&gt;,&lt;/b&gt;C8WD&lt;/code&gt;) you &lt;b&gt;must&lt;/b&gt; include a backslash (&lt;b&gt;\\&lt;/b&gt;) immediately before the comma to prevent it from being evaluated as a delimiter.&lt;br&gt;&lt;br&gt;As with all query parameter values, the filter parameters must be URL encoded. For more information about encoding request parameters, refer to &lt;a href&#x3D;\&quot;/api-docs/static/rest-request-components.html#parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;URL encoding query parameter values&lt;/a&gt;.&lt;/span&gt;&lt;br&gt;For example, to retrieve all vehicle trims for a 2022 Audi A4:&lt;ul&gt;&lt;li&gt;Set the &lt;strong&gt;compatibility_property&lt;/strong&gt; filter to &lt;code&gt;compatibility_property&#x3D;Trim&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Include the following name/value filters using one &lt;strong&gt;filter&lt;/strong&gt; parameter:&lt;ul&gt;&lt;li&gt;&lt;code&gt;Year:2022&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Make:Audi&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;Model:A4&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;BodyStyle:AWD B9 8W5\\,8WD&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;The resulting comma-separated filter query parameter is:&lt;pre&gt;&lt;code&gt;filter&#x3D;Year:2022,Make:Audi,Model:A4,BodyStyle:AWD B9 8W5\\,8WD&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;The following sample shows the same filter but with URL encoding for the blank spaces.&lt;br&gt;&lt;pre&gt;&lt;code&gt;GET https://api.ebay.com/commerce/&lt;br&gt;taxonomy/v1/category_tree/100/&lt;br&gt;get_compatibility_property_values?&lt;b&gt;category_id&lt;/b&gt;&#x3D;6016&amp;&lt;b&gt;compatibility_property&lt;/b&gt;&#x3D;Trim&amp;&lt;b&gt;filter&lt;/b&gt;&#x3D;Year:2022,Make:Audi,Model:A4,BodyStyle:AWD%20B9%208W5%5C%2C8WD&lt;/code&gt;&lt;/pre&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; While not required, it is strongly recommended that users limit the size of the result set by using the &lt;b&gt;filter&lt;/b&gt; query parameter. Failure to do so may result in a timeout error if too much data is attempted to be returned.&lt;/span&gt; For implementation help, refer to eBay API documentation at https://developer.ebay.com/api-docs/commerce/taxonomy/types/txn:ConstraintFilter (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getCompatibilityPropertyValues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCompatibilityPropertyValuesRequest($categoryTreeId, $compatibilityProperty, $categoryId, $filter = null, string $contentType = self::contentTypes['getCompatibilityPropertyValues'][0])
    {

        // verify the required parameter 'categoryTreeId' is set
        if ($categoryTreeId === null || (is_array($categoryTreeId) && count($categoryTreeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryTreeId when calling getCompatibilityPropertyValues'
            );
        }

        // verify the required parameter 'compatibilityProperty' is set
        if ($compatibilityProperty === null || (is_array($compatibilityProperty) && count($compatibilityProperty) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $compatibilityProperty when calling getCompatibilityPropertyValues'
            );
        }

        // verify the required parameter 'categoryId' is set
        if ($categoryId === null || (is_array($categoryId) && count($categoryId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryId when calling getCompatibilityPropertyValues'
            );
        }



        $resourcePath = '/category_tree/{category_tree_id}/get_compatibility_property_values';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $compatibilityProperty,
            'compatibility_property', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $categoryId,
            'category_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            'filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($categoryTreeId !== null) {
            $resourcePath = str_replace(
                '{' . 'category_tree_id' . '}',
                ObjectSerializer::toPathValue($categoryTreeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDefaultCategoryTreeId
     *
     * Get a Default Category Tree ID
     *
     * @param  string $marketplaceId The unique identifier of the eBay marketplace for which the category tree ID is requested. For a list of supported marketplace IDs, see &lt;a href&#x3D;\&quot;/api-docs/commerce/taxonomy/static/supportedmarketplaces.html\&quot;&gt;Marketplaces with Default Category Trees&lt;/a&gt;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDefaultCategoryTreeId'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\taxonomy\Model\BaseCategoryTree
     */
    public function getDefaultCategoryTreeId($marketplaceId, string $contentType = self::contentTypes['getDefaultCategoryTreeId'][0])
    {
        list($response) = $this->getDefaultCategoryTreeIdWithHttpInfo($marketplaceId, $contentType);
        return $response;
    }

    /**
     * Operation getDefaultCategoryTreeIdWithHttpInfo
     *
     * Get a Default Category Tree ID
     *
     * @param  string $marketplaceId The unique identifier of the eBay marketplace for which the category tree ID is requested. For a list of supported marketplace IDs, see &lt;a href&#x3D;\&quot;/api-docs/commerce/taxonomy/static/supportedmarketplaces.html\&quot;&gt;Marketplaces with Default Category Trees&lt;/a&gt;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDefaultCategoryTreeId'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\taxonomy\Model\BaseCategoryTree, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDefaultCategoryTreeIdWithHttpInfo($marketplaceId, string $contentType = self::contentTypes['getDefaultCategoryTreeId'][0])
    {
        $request = $this->getDefaultCategoryTreeIdRequest($marketplaceId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\taxonomy\Model\BaseCategoryTree' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\taxonomy\Model\BaseCategoryTree' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\taxonomy\Model\BaseCategoryTree', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\BaseCategoryTree';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\taxonomy\Model\BaseCategoryTree',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDefaultCategoryTreeIdAsync
     *
     * Get a Default Category Tree ID
     *
     * @param  string $marketplaceId The unique identifier of the eBay marketplace for which the category tree ID is requested. For a list of supported marketplace IDs, see &lt;a href&#x3D;\&quot;/api-docs/commerce/taxonomy/static/supportedmarketplaces.html\&quot;&gt;Marketplaces with Default Category Trees&lt;/a&gt;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDefaultCategoryTreeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultCategoryTreeIdAsync($marketplaceId, string $contentType = self::contentTypes['getDefaultCategoryTreeId'][0])
    {
        return $this->getDefaultCategoryTreeIdAsyncWithHttpInfo($marketplaceId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDefaultCategoryTreeIdAsyncWithHttpInfo
     *
     * Get a Default Category Tree ID
     *
     * @param  string $marketplaceId The unique identifier of the eBay marketplace for which the category tree ID is requested. For a list of supported marketplace IDs, see &lt;a href&#x3D;\&quot;/api-docs/commerce/taxonomy/static/supportedmarketplaces.html\&quot;&gt;Marketplaces with Default Category Trees&lt;/a&gt;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDefaultCategoryTreeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDefaultCategoryTreeIdAsyncWithHttpInfo($marketplaceId, string $contentType = self::contentTypes['getDefaultCategoryTreeId'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\BaseCategoryTree';
        $request = $this->getDefaultCategoryTreeIdRequest($marketplaceId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDefaultCategoryTreeId'
     *
     * @param  string $marketplaceId The unique identifier of the eBay marketplace for which the category tree ID is requested. For a list of supported marketplace IDs, see &lt;a href&#x3D;\&quot;/api-docs/commerce/taxonomy/static/supportedmarketplaces.html\&quot;&gt;Marketplaces with Default Category Trees&lt;/a&gt;. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDefaultCategoryTreeId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDefaultCategoryTreeIdRequest($marketplaceId, string $contentType = self::contentTypes['getDefaultCategoryTreeId'][0])
    {

        // verify the required parameter 'marketplaceId' is set
        if ($marketplaceId === null || (is_array($marketplaceId) && count($marketplaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplaceId when calling getDefaultCategoryTreeId'
            );
        }


        $resourcePath = '/get_default_category_tree_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $marketplaceId,
            'marketplace_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getExpiredCategories
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree.&lt;br&gt;&lt;br&gt;The category tree ID for an eBay marketplace can be retrieved using the &lt;a href&#x3D;\&quot;/api-docs/commerce/taxonomy/resources/category_tree/methods/getDefaultCategoryTreeId\&quot;&gt;getDefaultCategoryTreeId&lt;/a&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExpiredCategories'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\taxonomy\Model\ExpiredCategories
     */
    public function getExpiredCategories($categoryTreeId, string $contentType = self::contentTypes['getExpiredCategories'][0])
    {
        list($response) = $this->getExpiredCategoriesWithHttpInfo($categoryTreeId, $contentType);
        return $response;
    }

    /**
     * Operation getExpiredCategoriesWithHttpInfo
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree.&lt;br&gt;&lt;br&gt;The category tree ID for an eBay marketplace can be retrieved using the &lt;a href&#x3D;\&quot;/api-docs/commerce/taxonomy/resources/category_tree/methods/getDefaultCategoryTreeId\&quot;&gt;getDefaultCategoryTreeId&lt;/a&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExpiredCategories'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\taxonomy\Model\ExpiredCategories, HTTP status code, HTTP response headers (array of strings)
     */
    public function getExpiredCategoriesWithHttpInfo($categoryTreeId, string $contentType = self::contentTypes['getExpiredCategories'][0])
    {
        $request = $this->getExpiredCategoriesRequest($categoryTreeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\taxonomy\Model\ExpiredCategories' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\taxonomy\Model\ExpiredCategories' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\taxonomy\Model\ExpiredCategories', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\ExpiredCategories';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\taxonomy\Model\ExpiredCategories',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getExpiredCategoriesAsync
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree.&lt;br&gt;&lt;br&gt;The category tree ID for an eBay marketplace can be retrieved using the &lt;a href&#x3D;\&quot;/api-docs/commerce/taxonomy/resources/category_tree/methods/getDefaultCategoryTreeId\&quot;&gt;getDefaultCategoryTreeId&lt;/a&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExpiredCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExpiredCategoriesAsync($categoryTreeId, string $contentType = self::contentTypes['getExpiredCategories'][0])
    {
        return $this->getExpiredCategoriesAsyncWithHttpInfo($categoryTreeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getExpiredCategoriesAsyncWithHttpInfo
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree.&lt;br&gt;&lt;br&gt;The category tree ID for an eBay marketplace can be retrieved using the &lt;a href&#x3D;\&quot;/api-docs/commerce/taxonomy/resources/category_tree/methods/getDefaultCategoryTreeId\&quot;&gt;getDefaultCategoryTreeId&lt;/a&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExpiredCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getExpiredCategoriesAsyncWithHttpInfo($categoryTreeId, string $contentType = self::contentTypes['getExpiredCategories'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\ExpiredCategories';
        $request = $this->getExpiredCategoriesRequest($categoryTreeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getExpiredCategories'
     *
     * @param  string $categoryTreeId The unique identifier of the eBay category tree.&lt;br&gt;&lt;br&gt;The category tree ID for an eBay marketplace can be retrieved using the &lt;a href&#x3D;\&quot;/api-docs/commerce/taxonomy/resources/category_tree/methods/getDefaultCategoryTreeId\&quot;&gt;getDefaultCategoryTreeId&lt;/a&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getExpiredCategories'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getExpiredCategoriesRequest($categoryTreeId, string $contentType = self::contentTypes['getExpiredCategories'][0])
    {

        // verify the required parameter 'categoryTreeId' is set
        if ($categoryTreeId === null || (is_array($categoryTreeId) && count($categoryTreeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryTreeId when calling getExpiredCategories'
            );
        }


        $resourcePath = '/category_tree/{category_tree_id}/get_expired_categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($categoryTreeId !== null) {
            $resourcePath = str_replace(
                '{' . 'category_tree_id' . '}',
                ObjectSerializer::toPathValue($categoryTreeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getItemAspectsForCategory
     *
     * @param  string $categoryId The unique identifier of the leaf category for which aspects are being requested.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt; &lt;strong&gt;Note:&lt;/strong&gt; If the &lt;b&gt;category_id&lt;/b&gt; submitted does not identify a leaf node of the tree, this call returns an error. &lt;/span&gt; (required)
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemAspectsForCategory'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \macropage\SDKs\ebay\rest\taxonomy\Model\AspectMetadata
     */
    public function getItemAspectsForCategory($categoryId, $categoryTreeId, string $contentType = self::contentTypes['getItemAspectsForCategory'][0])
    {
        list($response) = $this->getItemAspectsForCategoryWithHttpInfo($categoryId, $categoryTreeId, $contentType);
        return $response;
    }

    /**
     * Operation getItemAspectsForCategoryWithHttpInfo
     *
     * @param  string $categoryId The unique identifier of the leaf category for which aspects are being requested.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt; &lt;strong&gt;Note:&lt;/strong&gt; If the &lt;b&gt;category_id&lt;/b&gt; submitted does not identify a leaf node of the tree, this call returns an error. &lt;/span&gt; (required)
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemAspectsForCategory'] to see the possible values for this operation
     *
     * @throws \macropage\SDKs\ebay\rest\taxonomy\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \macropage\SDKs\ebay\rest\taxonomy\Model\AspectMetadata, HTTP status code, HTTP response headers (array of strings)
     */
    public function getItemAspectsForCategoryWithHttpInfo($categoryId, $categoryTreeId, string $contentType = self::contentTypes['getItemAspectsForCategory'][0])
    {
        $request = $this->getItemAspectsForCategoryRequest($categoryId, $categoryTreeId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\macropage\SDKs\ebay\rest\taxonomy\Model\AspectMetadata' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\macropage\SDKs\ebay\rest\taxonomy\Model\AspectMetadata' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\macropage\SDKs\ebay\rest\taxonomy\Model\AspectMetadata', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\AspectMetadata';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\macropage\SDKs\ebay\rest\taxonomy\Model\AspectMetadata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getItemAspectsForCategoryAsync
     *
     * @param  string $categoryId The unique identifier of the leaf category for which aspects are being requested.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt; &lt;strong&gt;Note:&lt;/strong&gt; If the &lt;b&gt;category_id&lt;/b&gt; submitted does not identify a leaf node of the tree, this call returns an error. &lt;/span&gt; (required)
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemAspectsForCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemAspectsForCategoryAsync($categoryId, $categoryTreeId, string $contentType = self::contentTypes['getItemAspectsForCategory'][0])
    {
        return $this->getItemAspectsForCategoryAsyncWithHttpInfo($categoryId, $categoryTreeId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getItemAspectsForCategoryAsyncWithHttpInfo
     *
     * @param  string $categoryId The unique identifier of the leaf category for which aspects are being requested.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt; &lt;strong&gt;Note:&lt;/strong&gt; If the &lt;b&gt;category_id&lt;/b&gt; submitted does not identify a leaf node of the tree, this call returns an error. &lt;/span&gt; (required)
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemAspectsForCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getItemAspectsForCategoryAsyncWithHttpInfo($categoryId, $categoryTreeId, string $contentType = self::contentTypes['getItemAspectsForCategory'][0])
    {
        $returnType = '\macropage\SDKs\ebay\rest\taxonomy\Model\AspectMetadata';
        $request = $this->getItemAspectsForCategoryRequest($categoryId, $categoryTreeId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getItemAspectsForCategory'
     *
     * @param  string $categoryId The unique identifier of the leaf category for which aspects are being requested.&lt;br&gt;&lt;br&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt; &lt;strong&gt;Note:&lt;/strong&gt; If the &lt;b&gt;category_id&lt;/b&gt; submitted does not identify a leaf node of the tree, this call returns an error. &lt;/span&gt; (required)
     * @param  string $categoryTreeId The unique identifier of the eBay category tree. The category tree ID for an eBay marketplace can be retrieved using the &lt;b&gt;getDefaultCategoryTreeId&lt;/b&gt; method. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getItemAspectsForCategory'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getItemAspectsForCategoryRequest($categoryId, $categoryTreeId, string $contentType = self::contentTypes['getItemAspectsForCategory'][0])
    {

        // verify the required parameter 'categoryId' is set
        if ($categoryId === null || (is_array($categoryId) && count($categoryId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryId when calling getItemAspectsForCategory'
            );
        }

        // verify the required parameter 'categoryTreeId' is set
        if ($categoryTreeId === null || (is_array($categoryTreeId) && count($categoryTreeId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $categoryTreeId when calling getItemAspectsForCategory'
            );
        }


        $resourcePath = '/category_tree/{category_tree_id}/get_item_aspects_for_category';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $categoryId,
            'category_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($categoryTreeId !== null) {
            $resourcePath = str_replace(
                '{' . 'category_tree_id' . '}',
                ObjectSerializer::toPathValue($categoryTreeId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
